 child process , worker threads ,  cluster modules:


 child process : they run code sprint from master process
 child process can be created using spawn , fork , exec 
 they communicate using standard input out steam , events 


 worker threads : is a process of performing cup extensive task
 sprit from the main thread it does not block the execution of the event loop

cluster module : in this case we create multiple instances of the 
same application running  on the same port 
they follow master slave system 
they communicate using inter process communication(IPC)
the cluster module uses round-robin load balancing

Libuv is responsible for:

Event loop
Asynchronous I/O
Cross-platform 
Thread Pool
Time Management


Libuv : is a cross platforms library written in C which is responsible to provides asynchronous I/O operations and an event loop implementation



Nodejs is a Event Driven , non blocking I/o model

Event-Drivern : the flow of program is determined by events that occurs asynchronous it case of nodejs and event can be incoming request , file read , network communication timer expiration
Insted if tradition way that nodjs wait for any event to complete it handle callback or register event handle which want for those events to complete and then it response accordingly 



Event Queue || task Queue || callback Queue : is a data structure that holds events and their associate 
callbacks until they are processed by the
event loop When an asynchronous operation or event occurs, its corresponding
callback function is added to the event queue



Call Stack: The call stack keeps track of the currently executing functions in the JavaScript runtime



Microtask Queue : is a separate queue that holds microtasks.

Microtasks are typically small asynchronous tasks that need to be executed before the event loop execute the tasks from callback queues. Promises and certain APIs like process.nextTick() and queueMicrotask() add microtasks to the microtask queue.


ODM

Socket use TCP connection = Socket is two way communication  







REPL stands for "Read-Eval-Print Loop."

util.promisify : method is used to covert callback style asynchronous function to functions that returns promises




We can avoid callback hell with help of
Promises utils unit.promisify
Async/await
Control flow libraries like async.js





for what kind of projects nodejs is best choise and not good choise

it is best for projects where you want to handel large number of concurrent operations with out any block 
and with the use of minimum resources of the system due to their single traded , event loop articeture

but if you have any projects which is using large amount of computational power like maybe it is doing
file processing , hight alogtherium  or maybe image processing or any other cup intensive task
then python or the java will be best choise


console.log(5>4>3);
console.log((0.1 + 0.2) == 0.3)
Ali Ahmed
6:44â€¯PM
let x = {a:1};
let y = {a:1};
console.log(x == y);


getStaticAuth


useRef for rendering controal


react 18 and 16

types of null and undefined